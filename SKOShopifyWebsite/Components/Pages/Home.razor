@page "/"
@rendermode InteractiveServer
@inject ShopifyService Shopify
@inject IHttpContextAccessor HttpContextAccessor
@using Models
@using SKOShopifyWebsite.Services
@using SKOShopifyWebsite.Components.CustomComponents

<PageTitle>Home</PageTitle>

@if(showCart)
{
    <div class="cart-component">
        <CartComponent IsOpen="@showCart" Cart="@currentCart" OnClose="@CloseCart"/>
    </div>
}


<section class="main-layout">

    <button class="cart-svg" @onclick="ToggleCart">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
            <path fill="#FFFFFF" d="M24 48C10.7 48 0 58.7 0 72C0 85.3 10.7 96 24 96L69.3 96C73.2 96 76.5 98.8 77.2 102.6L129.3 388.9C135.5 423.1 165.3 448 200.1 448L456 448C469.3 448 480 437.3 480 424C480 410.7 469.3 400 456 400L200.1 400C188.5 400 178.6 391.7 176.5 380.3L171.4 352L475 352C505.8 352 532.2 330.1 537.9 299.8L568.9 133.9C572.6 114.2 557.5 96 537.4 96L124.7 96L124.3 94C119.5 67.4 96.3 48 69.2 48L24 48zM208 576C234.5 576 256 554.5 256 528C256 501.5 234.5 480 208 480C181.5 480 160 501.5 160 528C160 554.5 181.5 576 208 576zM432 576C458.5 576 480 554.5 480 528C480 501.5 458.5 480 432 480C405.5 480 384 501.5 384 528C384 554.5 405.5 576 432 576z"/>
        </svg>
    </button>

    <section class="logo-container">
        <img src="@storeLogoPath" class="logo"/>
    </section>

    @if (products == null)
    {
        <p><em>Loading…</em></p>
    }
    else
    {
        <section class="product-grid">
            @foreach (var p in products)
            {
                <ProductDisplayComponent displayProduct="p"/>
            }

        </section>
    }

    <section class="footer">
        <a href="/about">About</a> |
        <a href="/terms">Terms</a> |
        <a href="/faq">FAQ</a> |
        <a href="/socials">Socials</a>
    </section>
</section>
@code {
    private List<Product>? products;
    private string storeLogoPath = "images/store-logo-black-white.png";
    bool showCart = false;
    private Cart currentCart;
    private string cartId;

    protected override async Task OnInitializedAsync()
    {
        products = await Shopify.GetProductsAsync();

        var context = HttpContextAccessor.HttpContext;

        var cookie = context.Request.Cookies["cartId"];
        if (!string.IsNullOrEmpty(cookie))
        {
            cartId = cookie;
            currentCart = await Shopify.GetCartAsync(cartId);
        }

        else
        {
            // No cartId in cookies — create a new cart
            var result = await Shopify.CreateCartAsync(); // You’ll need to add this method if not yet
            cartId = result.CartId;
            currentCart = await Shopify.GetCartAsync(cartId);

            // Set the cartId in a cookie so it persists
            context.Response.Cookies.Append("cartId", cartId, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.Lax,
                    Expires = DateTimeOffset.UtcNow.AddDays(30)
                });
        }
    }

    private void ToggleCart()
    {
        showCart = !showCart;
    }

    private Task CloseCart()
    {
        showCart = false;
        return Task.CompletedTask;
    }
}
